# Thought to be unique character set to each posting
id <- pg %>%
html_nodes('a.jobtitle.turnstileLink') %>%
str_extract_all("id=*.* href") %>%
str_remove_all(" href") %>%
str_remove_all("id=") %>%
str_remove_all("\"")
# Add a page number for the scrape
page <- (i + 1)
Sys.sleep(1)
as.data.frame(cbind(title,
employer,
short_description,
location,
date,
link=paste0("indeed.com",link),
id,
page=(page-1)
))
})
View(jobs)
write.csv(jobs, file="C:/data/combination_scrape_test11_secondfullrun.csv")
rmarkdown::paged_table(head(data))
tbl <- rmarkdown::paged_table(head(data))
tbl
write.table(tbl, file="C:/data")
write.table(tbl, file="C:/data/tbl")
data <- data.frame(read.delim("https://raw.githubusercontent.com/palmorezm/msds/main/605/upperair_72747_0100Z.txt", header=FALSE, sep = "\t"))
colnames(data) <- c("Pressure", "Height", "Temperature")
head(data)
tbl <- rmarkdown::paged_table(head(data))
write.table(tbl, file="C:/data/tbl")
write.table(tbl, file="C:/data/tbl.png")
plot(data$Pressure, data$Temperature,
xlab = "Pressure (hPa)", ylab = "Temperature (C)")
plot(data$Pressure, data$Temperature,
xlab = "Pressure (hPa)", ylab = "Temperature (C)",
main = "Upper Atomspheric Temperature Fluxuations",
sub = "Station ID: 72747 on January 1, 2021")
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(ggpubr)
library(kableExtra)
library(reshape2)
library(corrplot)
library(ggstatsplot)
library(MASS)
library(bestNormalize)
library(Metrics)
library(VGAM)
theme_set(theme_minimal())
# Our training data
tdata <- read.csv(
"https://raw.githubusercontent.com/palmorezm/data621/main/moneyball-training-data.csv
?token=AQYT6MZMRA4GRVITJM7BRUDAGVK7G")
knitr::opts_chunk$set(echo = TRUE)
tdata <- read.csv(
"https://raw.githubusercontent.com/palmorezm/data621/main/moneyball-training-data.csv
?token=AQYT6MZMRA4GRVITJM7BRUDAGVK7G")
tdata <- read.csv(
"https://raw.githubusercontent.com/palmorezm/msds/main/621/HW1/moneyball-training-data.csv")
# Basic statistics from the set
total.obs <- count(tdata)
avg.wins <- mean(tdata$TARGET_WINS)
max.wins <- max(tdata$TARGET_WINS)
sd.wins <- sd(tdata$TARGET_WINS)
colnames <- colnames(tdata)
missing.values <- (sum(is.na(tdata)))
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(ggpubr)
library(kableExtra)
library(reshape2)
library(corrplot)
library(ggstatsplot)
library(MASS)
library(bestNormalize)
library(Metrics)
library(VGAM)
theme_set(theme_minimal())
# Our training data
tdata <- read.csv(
"https://raw.githubusercontent.com/palmorezm/data621/main/moneyball-training-data.csv
?token=AQYT6MZMRA4GRVITJM7BRUDAGVK7G")
tdata[2:17]  %>%
gather(variable, value, -TARGET_WINS) %>%
ggplot(., aes(value, TARGET_WINS)) +
ggtitle("Linearity of Values") +
geom_point(fill = "white",
size=1,
shape=1,
color="light blue") +
geom_smooth(formula = y~x,
method = "lm",
size=.1,
se = TRUE,
color = "black",
linetype = "dotdash",
alpha=0.25) +
facet_wrap(~variable,
scales ="free",
ncol = 4) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
tdata %>%
gather(variable, value, TARGET_WINS:TEAM_FIELDING_DP) %>%
ggplot(., aes(value))  +
ggtitle("Distribution of Performance Variables") +
geom_density(fill = "white", color="lightblue") +
labs(x = element_blank(), y = element_blank()) +
facet_wrap(~variable, scales ="free", ncol = 4) +
theme(axis.text.x = element_blank(), axis.text.y = element_blank())
ks.test <- lm(TARGET_WINS ~. -INDEX, tdata)
summary(ks.test)
plot(ks.test)
hist(resid(ks.test), main="Distribution of Residuals")
tdata
knitr::opts_chunk$set(echo = TRUE)
head(tdata, 3)
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(ggpubr)
library(kableExtra)
library(reshape2)
library(corrplot)
library(ggstatsplot)
library(MASS)
library(bestNormalize)
library(Metrics)
library(VGAM)
theme_set(theme_minimal())
tdata <- read.csv(
"https://raw.githubusercontent.com/palmorezm/msds/main/621/HW1/moneyball-training-data.csv")
# Basic statistics from the set
total.obs <- count(tdata)
avg.wins <- mean(tdata$TARGET_WINS)
max.wins <- max(tdata$TARGET_WINS)
sd.wins <- sd(tdata$TARGET_WINS)
colnames <- colnames(tdata)
missing.values <- (sum(is.na(tdata)))
head(tdata, 3)
tdata %>%
mutate(CaughtStealing = TEAM_BASERUN_CS^2)
tdata %>%
mutate(CaughtStealing = TEAM_BASERUN_CS^2) %>%
ggplot() +
geom_point(aes(CaughtStealing, TARGET_WINS))
tdata %>%
mutate(CaughtStealing = TEAM_BASERUN_CS) %>%
ggplot() +
geom_point(aes(CaughtStealing, TARGET_WINS^2))
tdata %>%
mutate(CaughtStealing = TEAM_BASERUN_CS) %>%
ggplot() +
geom_point(aes(CaughtStealing, TARGET_WINS^2)) + geom_smooth()
tdata %>%
mutate(CaughtStealing = TEAM_BASERUN_CS) %>%
ggplot() +
geom_point(aes(CaughtStealing, TARGET_WINS^2)) + geom_smooth(aes(CaughtStealing, TARGET_WINS^2))
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(dplyr)
theme_set(theme_minimal())
# Packages
library(tidyverse
# Packages
library(tidyverse
# Packages
library(tidyverse)
theme_set(theme_minimal())
hits <- read.csv(
"https://raw.githubusercontent.com/palmorezm/msds/main/605/hits.csv")
# Basic statistics from the set
summary(hits[c(2:4, 9:11)])
big_hits <- hits[c(2:4,9:11)] %>%
filter(mph > 40)
hits
big_hits <- hits[c(2:4,9:11)] %>%
filter(ev > 40)
big_hits %>%
gather(variable, value, -(c(dist, xHR))) %>%
ggplot(., aes(value, dist)) +
ggtitle("Linearity of Values") +
geom_point(fill = "black",
size=1,
shape=21,
color="light blue") +
geom_smooth(formula = y~x,
method = "lm",
size=.1,
se = TRUE,
color = "black",
linetype = "dotted",
alpha=0.25) +
facet_wrap(~variable,
scales ="free",
ncol = 4) +
theme( axis.text.y = element_blank())
hits.mod.ks <- lm(dist ~. -xHR, hits)
summary(hits.mod.ks)
plot(hits.mod.ks)
hist(resid(hits.mod.ks), main = "Distribution of Residuals")
# Basic statistics from the set
sum.tbl <- summary(hits[c(2:4, 9:11)])
table(sum.tbl)
kable(sum.tbl)
library(kableExtra)
kable(sum.tbl)
rmarkdown::paged_table(sum.tbl)
# Basic statistics from the set
summary(hits[c(2:4, 9:11)])
data.frame(sum.tbl)
rmarkdown::paged_table(tbl)
tbl <- data.frame(sum.tbl)
rmarkdown::paged_table(tbl)
rmarkdown::paged_table(tbl[-1])
sum.tbl
hits.mod.hr <- lm(dist ~ HR -xHR, hits)
summary(hits.mod.hr)
plot(hits.mod.hr)
hist(resid(hits.mod.hr), main = "Distribution of Residuals")
hits.mod.ks <- lm(dist ~. -xHR, big_hits)
summary(hits.mod.ks)
hits.mod.hr <- lm(dist ~ HR -xHR, big_hits)
summary(hits.mod.hr)
hits.mod.angle <- lm(dist ~ angle -xHR, big_hits)
summary(hits.mod.angle)
hits.mod.angle <- lm(dist ~ angle + ev -xHR, big_hits)
summary(hits.mod.angle)
knitr::opts_chunk$set(echo = TRUE)
f3 <- function(x) {
return(exp(2 * x) * sin(3 * x))
}
composite.simpson <- function(f, a, b, n) {
if (is.function(f) == FALSE) {
stop('f must be a function with one parameter (variable)')
}
h <- (b - a) / n
xj <- seq.int(a, b, length.out = n + 1)
xj <- xj[-1]
xj <- xj[-length(xj)]
approx <- (h / 3) * (f(a) + 2 * sum(f(xj[seq.int(2, length(xj), 2)])) + 4 * sum(f(xj[seq.int(1, length(xj), 2)])) + f(b))
return(approx)
}
composite.simpson(f3, 0, 2, 8)
fx2 <- function(x) {
return(1/x)
}
simp(fx2, 1, 2)
simp <- function(f, a, b) {
if (is.function(f) == FALSE) {
stop('f of (x) must be a function with one parameter (variable)')
}
h <- (b - a) / 2
x0 <- a
x1 <- a + h
x2 <- b
s <- (h / 3) * (f(x0) + 4 * f(x1) + f(x2))
return(s)
}
simp(fx2, 1, 2)
install.packages("Bolstad2")
library(Bolstad2)
sintegral(f3, 0, 1)
sintegral(1, fx2)
sintegral(1, fx2, n.pts = 4)
?sintegral()
sintegral(c(0:1), fx2, n.pts = 4)
x <- seq(0,1, length.out = 100)
sintegral(c(0:1), fx2, n.pts = 4)
sintegral(x, fx2, n.pts = 4)
fxnorm <- dnorm(x)
sintegral(x, fxnorm, n.pts = 4)
sintegral(x, fx2, n.pts = 4)
fx <- (x^2)
sintegral(x, fx, n.pts = 4)
est <- sintegral(x, fx, n.pts = 256)
est
est <- sintegral(x, fx, n.pts = 300)
est
plot(est$x, est$y
plot(est$x, est$y)
plot(est$x, est$y)
plot(est$x, est$y) + abline(1)
plot(est$x, est$y) + abline(coef = c(0,1))
plot(est$x, est$y, color = "blue") + abline(coef = c())
slp <- (est$y / est$x)
plot(est$x, est$y) + abline(coef = slp)
slp <- median(est$y / est$x)
plot(est$x, est$y) + abline(coef = slp)
slp <- median(est$y / est$x)
plot(est$x, est$y) + abline(coef = slp)
plot(est$x, est$y) + abline(slp)
plot(est$x, est$y)
plot(est$y, est$x)
plot(est$x, est$y)
est$y[1] - est$y[300]
est$y[1] - est$y[300] / est$x[1] - est$x[300]
slp <- (est$y[1] - est$y[300] / est$x[1] - est$x[300])
plot(est$x, est$y)
plot(est$x, est$y) + abline(coef = slp)
slp <- abs(est$y[1] - est$y[300] / est$x[1] - est$x[300])
plot(est$x, est$y) + abline(coef = slp)
slp <- diff(est$y) / diff(est$x)
plot(est$x, est$y) + abline(coef = slp)
x <- seq(0, 1, length.out = 10)
fxnorm <- dnorm(x)
fx <- (x^2)
est <- sintegral(x, fx, n.pts = 300)
slp <- diff(est$y) / diff(est$x)
plot(est$x, est$y) + abline(coef = slp)
plot(est$x, est$y, lty = 3) + abline(coef = slp)
plot(est$x, est$y, lty = 6) + abline(coef = slp)
plot(est$x, est$y, lty = 1) + abline(coef = slp)
plot(est$x, est$y, lty = 1)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(knitr)
ggplot(data.frame(x = c(0, 10)), aes(x)) +
stat_function(fun = function(x) log(x)) +
scale_x_continuous(breaks = c(1:10)) +
geom_line(aes(y = 0))
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (log(x0)/(1/x0))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 0
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x ((x^2+x-2)/(x^2+x-2))
newts[iter] <- newt
x <- newt
}
x <- 0
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - ((x^2+x-2)/(x^2+x-2))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - (cos(x))/(cos(x))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (cos(x0)/(1/x0))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (cos(x0)/(1/cos(x0))
newts[iter] <- newt
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (cos(x0)/(1/cos(x0)))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (1/(cos(x0))/(cos(x0)))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
n <- 5
<- c(0)
x <- 1.5
n <- 5
newts <- c(0)
for(n in 1:5){
newt <- x0 - ((cos(x0))/(1/cos(x0)))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
n <- 5
newts <- c(0)
for(n in 1:5){
newt <- x0 - (cos(x0)/(1/cos(x0)))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
n <- 5
newts <- c(0)
for(n in 1:5){
newt <- x - (cos(x)/(1/cos(x)))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
inter <- 5
newts <- c(0)
for(n in 1:5){
newt <- x - (cos(x)/(1/cos(x)))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(n in 1:5){
newt <- x - (cos(x)/(1/cos(x)))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - (cos(x)/(1/cos(x)))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - (cos(x)/(1/(cos(x))))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x + (cos(x)/(1/(cos(x))))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - (cos(x)/(1/(cos(x))))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- cos(x) - (cos(x)/(1/(cos(x))))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - cos(x)/(1/(cos(x)))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - cos(x)/((cos(x)))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 1.5
iter <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - cos(x)/(1/(cos(x)))
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
