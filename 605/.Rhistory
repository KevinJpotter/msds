geom_line(aes(y = 0))
ggplot(data.frame(x = c(0, 10)), aes(x)) +
stat_function(fun = function(x) log(x)) +
scale_x_continuous(breaks = c(1:10)) +
geom_line(aes(y = 0))
x <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - (log(x)*x)
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
newts <- c(0)
for(i in 1:5){
newt <- x - (log(x)*x)
newts[i] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
for(i in 1:5){
vec <- x - (log(x)*x)
vecs[i] <- vec
x <- vecs
}
x <- 2
vecs <- 0
for(i in 1:5){
vec <- x - (log(x)*x)
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x)*x)
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x)*x)
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x)*x)
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x)/1/(x)
vecs[i] <- vec
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x)/1/(x))
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (log(x0)/(1/x0))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(iter in 1:5){
vec <- x - (log(x)/1/(x))
vecs[iter] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x)/1/(x))
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x)/(1/x))
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (log(x0)/(1/x0))
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x))
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)))
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
vecs[i] <- vec
x <- vecs
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x0 <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x0 - (log(x0)*x0)
newts[iter] <- newt
x0 <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - (log(x)*x)
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
iters <- 5
newts <- c(0)
for(iter in 1:5){
newt <- x - (log(x)*x)
newts[iter] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
iters <- 5
newts <- c(0)
for(i in 1:5){
newt <- x - (log(x)*x)
newts[i] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
newts <- c(0)
for(i in 1:5){
newt <- x - (log(x)*x)
newts[i] <- newt
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
newts <- c(0)
for(i in 1:5){
single_interation <- x - (log(x)*x)
newts[i] <- single_interation
x <- newt
}
kable(cbind(1:5, newts, 1, 1-newts), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
vecs[i] <- vec
x <- vec
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
vecs[i] <- vec
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
vecs[i] <- vec
x <- vec
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
vecs <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
x <- vec
vecs[i] <- vec
}
kable(cbind(1:5, vecs, 1, 1-vecs), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
iterations <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
x <- vec
iterations[i] <- vec
}
kable(cbind(1:5, iterations, 1, 1-iterations), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
iterations <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
x <- vec
iterations[i] <- vec
}
tbl(cbind(1:5, iterations, 1, 1-iterations), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
table(cbind(1:5, iterations, 1, 1-iterations), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
iterations <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
x <- vec
iterations[i] <- vec
}
table(cbind(1:5, iterations, 1, 1-iterations), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
x <- 2
iterations <- c(0)
for(i in 1:5){
vec <- x - (log(x))/(1/x)
x <- vec
iterations[i] <- vec
}
rmarkdown::paged_table(cbind(1:5, iterations, 1, 1-iterations), col.names = c("Iteration", "Newton Approximation", "Actual Value", "Difference"), align = "c")
iterations
table(iterations)
rmarkdown::paged_table(iterations)
# Initial Value
x <- 2
# Fillable variable
iterations <- c(0)
# Loop through 5 iterations - store in iterations variable
for(i in 1:5){
vec <- x - (log(x))/(1/x) # Function
x <- vec
iterations[i] <- vec
as.data.frame(iterations)
}
iterations
rmarkdown::paged_table(iterations)
# Convert to data frame
data.frame(interations)
# Convert to data frame
data.frame(iterations)
library(dplyr)
library(dplyr)
# Initial Value
x <- 2
# Fillable variable
approximations <- c(0)
# Loop through 5 iterations - store in approximations df
for(i in 1:5){
vec <- x - (log(x))/(1/x) # Function
x <- vec
approximations[i] <- vec
}
# Convert to data frame
approximations %>%
mutate(diff =  1 - approximations)
# Convert to data frame
data.frame(approximations)
# Initial Value
x <- 2
# Fillable variable
est <- c(0)
# Loop through 5 iterations
for(i in 1:5){
vec <- x - (log(x))/(1/x) # Function
x <- vec
est[i] <- vec
}
# Convert to data frame
approximations <- data.frame(est)
approximations %>%
mutate(diff =  1 - approximations)
approximations %>%
mutate(diff =  as.numeric(1 - approximations))
approximations
# Initial Value
x <- 2
# Fillable variable
estimate <- c(0)
# Loop through 5 iterations
for(i in 1:5){
vec <- x - (log(x))/(1/x) # Function
x <- vec
estimate[i] <- vec
}
# Convert to data frame
approximations <- data.frame(estimate)
approximations
approximations %>%
mutate(diff =  as.numeric(1 - est))
mutate(diff =  round((1 - est),3)
approximations %>%
approximations %>%
mutate(diff = round((1 - estimate),3))
# Initial Value
x <- 2
# Fillable variable
estimate <- c(0)
# Loop through 5 iterations
for(i in 1:5){
vec <- x - (log(x))/(1/x) # Function
x <- vec
estimate[i] <- round(vec, 3)
}
# Convert to data frame
approximations <- data.frame(estimate)
approximations
approximations %>%
mutate(diff = round((1 - estimate),3))
approximations %>%
mutate(diff = round((1 - estimate),3)) %>%
mutate(true = 1)
# Create table to make comparissons
seq(1:5, length.out = 5)
# Create table to make comparissons
seq(1, length.out = 5)
# Create table to make comparisons
run <- seq(1, length.out = 5)
# Initial Value
x <- 2
# Fillable variable
estimate <- c(0)
# Loop through 5 iterations
for(i in 1:5){
vec <- x - (log(x))/(1/x) # Function
x <- vec
estimate[i] <- round(vec, 3)
}
# Create table to make comparisons
run <- seq(1, length.out = 5)
approximations <- data.frame(cbind(run, estimate))
approximations %>%
mutate(diff = round((1 - estimate),3)) %>%
mutate(true = 1) %>%
approximations <- data.frame(cbind(run, estimate))
approximations
approximations %>%
mutate(diff = round((1 - estimate),3)) %>%
mutate(true = 1) %>%
approximations %>%
mutate(diff = round((1 - estimate),3)) %>%
mutate(true = 1)
approximations %>%
mutate(diff = round((1 - estimate),3)) %>%
mutate(true = 1)
tbl <- approximations %>%
mutate(diff = round((1 - estimate),3)) %>%
mutate(true = 1)
rmarkdown::paged_table(tbl)
knitr::opts_chunk$set(echo = TRUE)
newdata.example <- data.frame(PropMD=0.03, TotExp=14)
predict(lm.example, newdata.example, interval="predict")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("https://raw.githubusercontent.com/palmorezm/msds/main/605/who.csv")
head(data)
plot(data$TotExp, data$LifeExp)
lm.data <- lm(LifeExp~TotExp, data)
summary(lm.data)
plot(data$TotExp^.06, data$LifeExp^4.6)
data$LifeExp4.6 <- data$LifeExp^4.6
data$TotExp.06 <- data$TotExp^.06
lm.data.t <- lm(LifeExp4.6~TotExp.06, data)
summary(lm.data.t)
newdata <- data.frame(TotExp.06=c(1.5,2.5))
predict(lm.data.t, newdata, interval="predict")^(1/4.6)
lm.example <- lm(LifeExp ~ PropMD + TotExp + TotExp:PropMD, data)
summary(lm.example)
par(mfrow=c(2,2))
plot(lm.example)
newdata.example <- data.frame(PropMD=0.03, TotExp=14)
predict(lm.example, newdata.example, interval="predict")
summary(data$LifeExp)
describe(data$LifeExp)
library(psych)
describe(data$LifeExp)
knitr::opts_chunk$set(echo = TRUE)
library(rgl)
level <- function(t){
10/(t^3) - 220*(t) + 5700
}
level <- function(t){
10/(t^3) - 220*(t) + 5700
}
x <- seq(-1, 1, length= 20)
y <- seq(-1, 1, length= 20)
z <- outer(x, y, level)
level <- function(t){
10/(t^3) - 220*(t) + 5700
}
x <- seq(-1, 1, length= 20)
y <- seq(-1, 1, length= 20)
z <- outer(x, y, level)
level <- function(t){
10/(t^3) - 220*(t) + 5700
}
x <- y <- seq(-1, 1, length= 20)
z <- outer(x, y, level)
level <- function(t){
10/(t^3) - 220*(t) + c
}
x <- y <- seq(-1, 1, length= 20)
z <- outer(x, y, level)
level <- function(t, c){
10/(t^3) - 220*(t) + c
}
persp(x, y, z)
level <- function(t, c){
10/(t^3) - 220*(t) + c
}
x <- y <- seq(-1, 1, length= 20)
z <- outer(x, y, level)
persp(x, y, z)
persp(x, y, z, col="lightblue")
persp(x, y, z, col="aquamarine")
persp(x, y, z, col="aquamarine", shade = .5)
persp(x, y, z, col="aquamarine", shade = .25)
curve(7800-1050/x^3-220*x, 0.5,35)
heart <- function(x, y){
x^2 + y^2 + 2
}
x <- y <- seq(-1, 1, length= 20)
z <- outer(x, y, heart)
persp(x, y, z, col="magenta", shade = .25)
persp(x, y, z, col="magenta", shade = .05)
heart <- function(x, y){
x^2 + y^2 + 2
}
x <- y <- seq(-1, 1, length= 150)
z <- outer(x, y, heart)
persp(x, y, z, col="magenta", shade = .05)
heart <- function(x, y){
x^2 + y^2 + 2
}
x <- y <- seq(-1, 1, length= 150)
z <- outer(x, y, heart)
persp(x, y, z, col="magenta", shade = .05)
print(persp(x, y, z, col="magenta", shade = .05))
view3d(persp(x, y, z, col="magenta", shade = .05))
persp(x, y, z, col="magenta", shade = .05)
x11()
persp(x, y, z, col="magenta", shade = .05)
View()
persp(x, y, z, col="magenta", shade = .05)
View(persp(x, y, z, col="magenta", shade = .05))
View(persp(x, y, z, col="magenta", shade = .05))
persp(x, y, z, col="magenta", shade = .05)
persp(x, y, z, col="magenta", shade = .05)
f <-function(x)(2*x-9)
i <- integral(f, bounds = list(x = c(4.5,8.5)))
f <-function(x)(2*x-9)
i <- integral(f, bounds = list(x = c(4.5,8.5)))
library(stats)
library(stats)
f <-function(x)(2*x-9)
i <- integral(f, bounds = list(x = c(4.5,8.5)))
library(stats)
f <-function(x)(2*x-9)
i <- integrate(f, bounds = list(x = c(4.5,8.5)))
i$value
integrate(f, lower = 4.5, upper = 8.5)
i$value
integrate(f, lower = 4.5, upper = 8.5)
i <- integrate(f, lower = 4.5, upper = 8.5)
i$value
integrate(f, lower = 4.5, upper = 8.5)
## define the integrated function
integrand <- function(x)
{
-x^{2}+3*x+4
}
## integrate the function from 0 to infinity
integrate(integrand, lower = -1, upper = 4)
fx <- function(x)
{
(x^2)-2*x-2
}
gx <- function(x)
{
x+2
}
plot (fx, -15, 15)
plot (gx, -5, 5, add=TRUE)
area_fun <- function(x) {
-x^2 + 3 * x + 4
}
integrate(area_fun, -1, 4)
