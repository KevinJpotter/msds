# Transformations
bestNorms <- ""
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Transformations
bestNorms <- tdata
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Transformations
bestNorms <- c(1:11)
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = TRUE,
out_of_sample =FALSE)
# Transformations
bestNorms <- c(1:11)
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = TRUE,
out_of_sample =FALSE)
}
# Transformations
bestNorms <- colnames(tdata)
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Transformations
bestNorms <-  tdata[1:11,]
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Transformations
tdata %>%
select(is.numeric)
bestNorms <-  df[1:11,]
# Transformations
df <- tdata %>%
select(is.numeric)
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
# Transformations
df <- tdata %>%
select(is.numeric)
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Focus on selected variables
bestNorms$TARGET_AMT$chosen_transform
bestNormalize::center_scale(tdata$TARGET_AMT)
bestNormalize::center_scale(tdata$TARGET_AMT)
scale(tdata$TARGET_AMT)
transformed$target_amt <- scale(tdata$TARGET_AMT)
transformed <- tdata
tdata$target_amt <- scale(tdata$TARGET_AMT)
tdata %>%
select("TARGET_AMT","target_amt") %>%
ggplot() + geom_point(aes(key, value))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot() + geom_point(aes(key, value))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot() + geom_point(aes(value))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot() + geom_point(aes(value, key))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot() + geom_density(aes(value))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot() + geom_density(aes(key))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot() + geom_density(aes(key, value))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot(aes(color = key)) + geom_density(aes(key, color))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot(aes(color = key)) + geom_density(aes(key))
tdata %>%
select(is.numeric) %>%
gather() %>%
ggplot(aes(color = key)) +
facet_wrap(~key, scales = "free") +
geom_density(aes(key))
tdata %>%
select(where(is.numeric)) %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
tdata$target_amt <- scale(log(tdata$TARGET_AMT))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot(aes(color = key)) + geom_density(aes(key))
tdata %>%
select(where(is.numeric)) %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
tdata$target_amt <- scale(log(tdata$TARGET_AMT + 1))
tdata %>%
select("TARGET_AMT","target_amt") %>%
gather() %>%
ggplot(aes(color = key)) + geom_density(aes(key))
tdata %>%
select(where(is.numeric)) %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
tdata %>%
select(where(is.numeric)) %>%
select("TARGET_AMT","target_amt") %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
tdata %>%
select(where(is.numeric)) %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
# Continue focusing on realistic values
tdata %>%
filter(TARGET_AMT >0)
# Continue focusing on realistic values
tdata["TARGET_AMT">0]
# Continue focusing on realistic values
tdata$TARGET_AMT["TARGET_AMT">0]
# Continue focusing on realistic values
tdata$TARGET_AMT["TARGET_AMT">.001]
# Continue focusing on realistic values
tdata$TARGET_AMT[tdata$TARGET_AMT>.0]
# Continue focusing on realistic values
Accident_costs <- tdata$TARGET_AMT[tdata$TARGET_AMT>.0]
# Continue focusing on realistic values
tdata$accident_costs <- tdata$TARGET_AMT[tdata$TARGET_AMT>.0]
# Continue focusing on realistic values
tdata$accident_costs <- tdata$TARGET_AMT[tdata$TARGET_AMT>.0]
# Continue focusing on realistic values
accident_costs <- tdata$TARGET_AMT[tdata$TARGET_AMT>.0]
plot(accident_costs)
rbind(tdata, accident_costs)
cbind(tdata, accident_costs)
# Split 70-30 training test
set.seed(1102)
train_index <- createDataPartition(df$TARGET_FLAG, p = .7, list = FALSE, times = 1)
library(caret)
# Split 70-30 training test
set.seed(1102)
train_index <- createDataPartition(df$TARGET_FLAG, p = .7, list = FALSE, times = 1)
train <- df[train_index,]
test <- df[-train_index,]
train
# Split 70-30 training test
set.seed(1102)
train_index <- createDataPartition(tdata$TARGET_FLAG, p = .7, list = FALSE, times = 1)
train <- tdata[train_index,]
test <- tdata[-train_index,]
train
# Split 70-30 training test
set.seed(1102)
train_index <- createDataPartition(tdata$TARGET_FLAG, p = .7, list = FALSE, times = 1)
train <- tdata[train_index,]
test <- tdata[-train_index,]
minority <- nrow(train[train$TARGET_FLAG == 1,])
majority <- nrow(train[train$TARGET_FLAG == 0,])
dif <- majority - minority
minority_index <- train[train$TARGET_FLAG == 1,]$INDEX
over_sample_train <- data.frame(INDEX = sample(minority_index, diff, TRUE)) %>%
merge(train, .) %>%
bind_rows(train)
# Split 70-30 training test
set.seed(1102)
train_index <- createDataPartition(tdata$TARGET_FLAG, p = .7, list = FALSE, times = 1)
train <- tdata[train_index,]
test <- tdata[-train_index,]
minority <- nrow(train[train$TARGET_FLAG == 1,])
majority <- nrow(train[train$TARGET_FLAG == 0,])
diff <- majority - minority
minority_index <- train[train$TARGET_FLAG == 1,]$INDEX
over_sample_train <- data.frame(INDEX = sample(minority_index, diff, TRUE)) %>%
merge(train, .) %>%
bind_rows(train)
diff <- majority - minority
minority_index <- train[train$TARGET_FLAG == 1,]$INDEX
over_sample_train <- data.frame(INDEX = sample(minority_index, diff, TRUE)) %>%
merge(train, .) %>%
bind_rows(train)
# Split 70-30 training test
set.seed(1102)
train_index <- createDataPartition(tdata$TARGET_FLAG, p = .7, list = FALSE, times = 1)
train <- tdata[train_index,]
test <- tdata[-train_index,]
minority <- nrow(train[train$TARGET_FLAG == 1,])
majority <- nrow(train[train$TARGET_FLAG == 0,])
diff <- majority - minority
minority_index <- train[train$TARGET_FLAG == 1,]$INDEX
over_sample_train <- data.frame(INDEX = sample(minority_index, diff, TRUE)) %>%
merge(train, .) %>%
bind_rows(train)
# Split 70-30 training test
set.seed(1102)
train_index <- createDataPartition(tdata$TARGET_FLAG, p = .7, list = FALSE, times = 1)
train <- tdata[train_index,]
test <- tdata[-train_index,]
minority <- nrow(train[train$TARGET_FLAG == 1,])
majority <- nrow(train[train$TARGET_FLAG == 0,])
diff <- majority - minority
minority_index <- train[train$TARGET_FLAG == 1,]$INDEX
over_sample_train <- data.frame(INDEX = sample(minority_index, diff, TRUE)) %>%
merge(train, .) %>%
bind_rows(train)
rindex <- tdata %>%
filter(TARGET_FLAG == 1)
reg.tindex <- createDataPartition(rindex$TARGET_AMT, p = .7, list = FALSE, times = 1)
reg.train <- rindex[reg.tindex,]
reg.test <- rindex[-reg.tindex,]
plot_vars <- c("TARGET_FLAG", names(keep(reg.train, is.numeric)))
reg.train[plot_vars] %>%
select(-INDEX, -TARGET_AMT) %>%
gather(variable, value, -TARGET_FLAG) %>%
ggplot(., aes(TARGET_FLAG, value, color=TARGET_FLAG)) +
geom_boxplot() +
scale_color_brewer(palette="Set1") +
theme_light() +
theme(legend.position = "none") +
facet_wrap(~variable, scales ="free", ncol = 4) +
labs(x = element_blank(), y = element_blank())
reg.train[plot_vars] %>%
select(-TARGET_AMT) %>%
gather(variable, value, -TARGET_FLAG) %>%
ggplot(., aes(TARGET_FLAG, value, color=TARGET_FLAG)) +
geom_boxplot() +
scale_color_brewer(palette="Set1") +
theme_light() +
theme(legend.position = "none") +
facet_wrap(~variable, scales ="free", ncol = 4) +
labs(x = element_blank(), y = element_blank())
reg.train
reg.train[plot_vars]
reg.train
reg.train %>%
select(is.numeric) %>%
melt
reg.train %>%
select(is.numeric) %>%
melt()
library(reshape2)
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
melt() %>%
ggplot(aes(TARGET_FLAG, value))
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
melt() %>%
ggplot(aes(variable, value)) + geom_boxplot()
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
melt() %>%
ggplot(aes(variable, value)) +
facet_wrap(~variable. scales = "free")
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
melt() %>%
ggplot(aes(variable, value)) +
facet_wrap(~variable. scales = "free") +
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
melt() %>%
ggplot(aes(variable, value)) +
facet_wrap(~variable, scales = "free") +
geom_boxplot()
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
melt(-TARGET_FLAG) %>%
ggplot(aes(variable, value)) +
facet_wrap(~variable, scales = "free") +
geom_boxplot()
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT)
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
melt(-TARGET_FLAG)
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(-TARGET_FLAG)
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(varable, value, -TARGET_FLAG)
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(varable, value, -TARGET_FLAG) %>%
ggplot(aes(variable, value)) +
facet_wrap(~variable, scales = "free") +
geom_boxplot()
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(varable, value, -TARGET_FLAG) %>%
ggplot(., aes(TARGET_FLAG, value, color=TARGET_FLAG)) +
facet_wrap(~variable, scales = "free")
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(varable, value, -TARGET_FLAG) %>%
ggplot(., aes(TARGET_FLAG, value, color=TARGET_FLAG)) +
geom_boxplot()
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(varable, value, -TARGET_FLAG) %>%
ggplot(., aes(TARGET_FLAG, value, color=TARGET_FLAG)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free")
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(varable, value, -TARGET_FLAG) %>%
ggplot(aes(TARGET_FLAG, value, color=TARGET_FLAG)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free")
model1 <- glm(TARGET_FLAG ~ city, family = binomial(link = "logit"), train)
summary(model1)
train
model1 <- glm(TARGET_FLAG ~ previous_accident, family = binomial(link = "logit"), train)
summary(model1)
model2 <- glm(TARGET_FLAG ~ previous_accident + city + young + clean_rec + educated, family = binomial(link = "logit"), train)
model2
summary(model2)
tdata
model3 <- glm(TARGET_FLAG ~ previous_accident + KIDSDRIV + mstatus + income.values + sex + car_use + educated + revoked + urban, family = binomial(link = "logit"), train)
tdata$
model3 <- glm(TARGET_FLAG ~ previous_accident + city + mstatus + income.values + sex + car_use + educated + KIDSDRIV + revoked, family = binomial(link = "logit"), train)
model3 <- glm(TARGET_FLAG ~ previous_accident + city + mstatus + income.values + sex + car_use + educated + KIDSDRIV + revoked, family = binomial(link = "logit"), train)
summary(model3)
model4 <- lm(target_amt ~ ., train)
summary(train)
model4 <- lm(target_amt ~ income.values + home.values + bluebook.values + oldclaim.values + avg_claim, train)
model4 <- lm(target_amt ~ ., train)
summary(train)
summary(model4)
model5 <- lm(target_amt ~ income.values + home.values + bluebook.values + oldclaim.values + avg_claim, train)
summary(train)
summary(model5)
mod_stats <- function(model, test_df, target = "TARGET_FLAG", threshold = 0.5){
test_df$yhat <- ifelse(predict.glm(model, test_df, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test_df$yhat), factor(test_df[[target]]), "1")
deviance <- model$deviance
r2 <- 1 - model$deviance / model$null.deviance
cat("F1 =", cm$byClass[7],"\nR2 =", r2, "\n\n")
print(cm)
eval <- data.frame(actual = test_df$TARGET_FLAG,
predicted = test_df$yhat,
prob = predict(model, test_df))
pred <- prediction(eval$prob, eval$actual)
auc <- performance(pred, measure = "auc")@y.values[[1]]
perf <- performance(pred, "tpr", "fpr")
plot(perf,main="ROC Curve", sub = paste0("AUC: ", round(auc, 3)))
return(cm)
}
mod_stats(model1, test)
mod_stats(model2, test)
mod_stats(mod3, test)
mod_stats(model3, test)
mod_stats(model4, test)
mod_stats(model5, test, "TARGET_AMT")
mod_stats(model5, test)
dim(df)
# Produce recommended transformations
tdata[1:16,]
# Produce recommended transformations
tdata[1:16]
# Produce recommended transformations
bestNorms <- tdata[1:16]
df <- tdata %>%
select(is.numeric)
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Produce recommended transformations
bestNorms <- tdata[1:16,1:11]
df <- tdata %>%
select(is.numeric)
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
df
df[1:16,1:11]
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
df[1:11,1:16]
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
df[1:11,1:16]
df <- df[1:11,1:16]
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Produce recommended transformations
bestNorms <- tdata[1:11,1:16]
df <- tdata %>%
select(is.numeric)
df <- df[1:11,1:16]
for (i in colnames(tdata)) {
bestNorms[[i]] <- bestNormalize(tdata[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Produce recommended transformations
bestNorms <- tdata[1:11,1:16]
df <- tdata %>%
select(is.numeric)
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Focus on selected variables
bestNorms$target_amt$chosen_transform
tdata %>%
select(where(is.numeric)) %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
tdata %>%
select(where(is.numeric)) %>%
select("TARGET_AMT","target_amt") %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
reg.train %>%
select(is.numeric) %>%
select(-TARGET_AMT) %>%
gather(varable, value, -TARGET_FLAG) %>%
ggplot(aes(TARGET_FLAG, value, color=TARGET_FLAG)) +
geom_boxplot() +
facet_wrap(~variable, scales = "free")
confusionMatrix(model1, test)
mod_stats(model1, test)
refactor(model1, test)
mod_stats(model1, test)
CM <- function(model, test, target, threshold = 0.5){
test$yhat <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$yhat), factor(test[[target]]), "1")
return(cm)
}
CM(model1, test)
CM(model1, test, target = "TARGET_FLAG")
CM(model1, test, target = "TARGET_FLAG", threshold = 0.5)
CM(model1, test, "TARGET_FLAG")
