oldclaim.values <- to_num(chars$OLDCLAIM)
concept_df <- as.data.frame(cbind(income.values,
home.values,
bluebook.values,
oldclaim.values))
income.values.stat <- to_num(chars$INCOME)
home.values.stat <- to_num(chars$HOME_VAL)
bluebook.values.stat <- to_num(chars$BLUEBOOK)
oldclaim.values.stat <- to_num(chars$OLDCLAIM)
# impute median values for missing variables
income.values[is.na(income.values)] <-
median(income.values, na.rm = TRUE)
home.values[is.na(home.values)] <-
median(home.values, na.rm = TRUE)
bluebook.values[is.na(bluebook.values)] <-
median(bluebook.values, na.rm = TRUE)
oldclaim.values[is.na(oldclaim.values)] <-
median(oldclaim.values, na.rm = TRUE)
# Recombine into data frame
dollar.values <-
data.frame(cbind(income.values,
home.values,
bluebook.values,
oldclaim.values))
dollar.values.stats <-
data.frame(cbind(income.values.stat,
home.values.stat,
bluebook.values.stat,
oldclaim.values.stat))
# Join with training data
tdata <- data.frame(cbind(tdata, dollar.values))
# Check the difference
dollar.values.tbl <- summary(dollar.values)
dollar.values.stats.tbl <- summary(dollar.values.stats)
kbl(dollar.values.tbl, booktabs = T, caption = "Imputed Summary Statistics") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
kbl(dollar.values.stats.tbl, booktabs = T, caption = "Original Summary Statistics") %>%
kable_styling(latex_options = c("striped", "hold_position"), full_width = F)
# Covert categorical variables to factors
factors <- tdata %>%
dplyr::select("PARENT1",
"MSTATUS",
"SEX",
"EDUCATION",
"JOB",
"CAR_USE",
"CAR_TYPE",
"RED_CAR",
"REVOKED",
"URBANICITY")
factors <- data.frame(lapply(factors, function(x) as.factor(x)))
factors <- factors %>%
rename("parent1" = "PARENT1",
"mstatus" = "MSTATUS",
"sex" = "SEX",
"education" = "EDUCATION",
"job" = "JOB",
"car_use" = "CAR_USE",
"car_type" = "CAR_TYPE",
"red_car" = "RED_CAR",
"revoked" = "REVOKED",
"urbanicity" = "URBANICITY")
tdata <- cbind(tdata, factors)
# Exclude unrealistic values
tdata <- tdata %>%
mutate(car_age = ifelse(CAR_AGE<0, NA, CAR_AGE))
summary(tdata$car_age)
summary(tdata$CAR_AGE)
full41 <- tdata
full41
full41[c(2:7, 15, 18, 22, 24, 27:41)]
# Drop INDEX and other unnecessary columns
tdata <- tdata %>%
dplyr::select("TARGET_FLAG",
"TARGET_AMT",
"KIDSDRIV",
"AGE",
"HOMEKIDS",
"YOJ",
"TRAVTIME",
"TIF",
"CLM_FREQ",
"MVR_PTS",
"income.values",
"home.values",
"bluebook.values",
"oldclaim.values",
"parent1",
"mstatus",
"sex",
"education",
"job",
"car_use",
"car_age",
"car_type",
"red_car",
"revoked",
"urbanicity")
# Check total variables present
length(colnames(tdata))
# More imputation
tdata$AGE[is.na(tdata$AGE)] <-
median(tdata$AGE, na.rm = T)
tdata$YOJ[is.na(tdata$YOJ)] <-
median(tdata$YOJ, na.rm = T)
tdata$car_age[is.na(tdata$car_age)] <-
median(tdata$car_age, na.rm = T)
sum(is.na(tdata))
tdata %>%
dplyr::select(is.factor) %>%
dplyr::select("car_type", "education", "job") %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, nrow = 3, scales = "free") +
geom_bar(aes(, fill = key )) + theme(axis.title = element_blank(), axis.text.x = element_blank(), legend.position = "none") + coord_flip() + ggtitle("Nonbinary Classifiers") + theme(plot.title = element_text(hjust = 0.5))
tdata %>%
dplyr::select(is.factor) %>%
dplyr::select("car_use",
"mstatus",
"parent1",
"red_car",
"revoked",
"sex",
"urbanicity") %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~ key, scales = "free") +
geom_bar(aes(, fill = key )) + theme(axis.title = element_blank(), axis.text.x = element_blank(), legend.position = "none") + coord_flip() + ggtitle("Binary Classifiers Counts") + theme(plot.title = element_text(hjust = 0.5))
tdata %>%
select_if(is.numeric) %>%
gather() %>%
ggplot(aes(key)) +
facet_wrap(~ key, scales = "free") +
geom_boxplot(aes(key, value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), axis.text.x = element_blank(), legend.position = "none") + ggtitle("Numeric Distributions") + theme(plot.title = element_text(hjust = 0.5))
# New features
tdata <- tdata %>%
mutate(city = ifelse(urbanicity == "Highly Urban/ Urban", 0, 1)) %>%
mutate(young = ifelse(AGE < 25, 1, 0)) %>%
mutate(clean_rec = ifelse(MVR_PTS == 0, 1, 0)) %>%
mutate(previous_accident = ifelse(CLM_FREQ == 0 & oldclaim.values == 0, 0, 1)) %>%
mutate(educated = ifelse(education %in% c("Bachelors", "Masters", "PhD"), 1, 0)) %>%
mutate(avg_claim = ifelse(CLM_FREQ > 0, oldclaim.values/CLM_FREQ, 0))
# Convert to factors
tdata$city <- as.factor(tdata$city)
tdata$young <- as.factor(tdata$young)
tdata$clean_rec <- as.factor(tdata$clean_rec)
tdata$previous_accident <- as.factor(tdata$previous_accident)
tdata$educated <- as.factor(tdata$educated)
tdata[26:31] %>%
select_if(is.factor) %>%
gather() %>%
ggplot(aes(value)) +
facet_wrap(~key, scales = "free") +
geom_bar(aes(fill = key, alpha = .5)) + theme(legend.position = "none", axis.title = element_blank()) + ggtitle("New Features") + theme(plot.title = element_text(hjust = 0.5))
# Produce recommended transformations
bestNorms <- tdata[1:11,1:16]
df <- tdata %>%
select_if(is.numeric)
for (i in colnames(df)) {
bestNorms[[i]] <- bestNormalize(df[[i]],
allow_orderNorm = FALSE,
out_of_sample =FALSE)
}
# Continue focusing on realistic values
accident_costs <- tdata$TARGET_AMT[tdata$TARGET_AMT>.0]
# Focus on selected variables
bestNorms$target_amt$chosen_transform
tdata$target_amt <- scale(log(tdata$TARGET_AMT + 1))
tdata %>%
dplyr::select(where(is.numeric)) %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
tdata %>%
dplyr::select(where(is.numeric)) %>%
dplyr::select("TARGET_AMT","target_amt") %>%
gather %>%
ggplot() +
facet_wrap(~ key, scales = "free") +
geom_density(aes(value, color = value, fill = key, alpha = .5)) + theme(axis.title = element_blank(), legend.position = "none") + ggtitle("Numeric Variable Density") + theme(plot.title = element_text(hjust = 0.5))
# Split 70-30 training test
set.seed(1102)
tindex <- createDataPartition(tdata$TARGET_FLAG, p = .7, list = FALSE, times = 1)
train <- tdata[tindex,]
test <- tdata[-tindex,]
rindex <- tdata %>%
filter(TARGET_FLAG == 1)
reg.tindex <- createDataPartition(rindex$TARGET_AMT, p = .7, list = FALSE, times = 1)
reg.train <- rindex[reg.tindex,]
reg.test <- rindex[-reg.tindex,]
model1 <- glm(TARGET_FLAG ~ previous_accident,
family = binomial(link = "logit"), train)
summary(model1)
model2 <- glm(TARGET_FLAG ~ previous_accident +
city + young + clean_rec +
educated, family = binomial(link = "logit"), train)
summary(model2)
model3 <- glm(TARGET_FLAG ~ previous_accident +
city + mstatus + income.values +
sex + car_use + educated + KIDSDRIV +
revoked, family = binomial(link = "logit"),
train)
summary(model3)
model4 <- lm(target_amt ~ ., train)
summary(model4)
model5 <- lm(target_amt ~ income.values +
home.values + bluebook.values +
oldclaim.values + avg_claim,
train)
summary(model5)
model6 <- lm(target_amt ~ . -TARGET_AMT -TARGET_FLAG, train)
pm <- stepAIC(model6, trace = F, direction = "both")
summary(pm)
# Calculate predicted values
# Classifier Model
mod1.pred <- predict.glm(model1, test)
mod2.pred <- predict.glm(model2, test)
mod3.pred <- predict.glm(model3, test)
# Regression Model
mod4.pred <- predict(model4, test, interval = "prediction")
mod5.pred <- predict(model5, test, interval = "prediction")
mod6.pred <- predict(model6, test, interval = "prediction")
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
return(paste(cat("F1 = ", cm$byClass[7]), kable(cm) ))
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
return(paste(cat("F1 = ", cm$byClass[7]), cm))
print(cm)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
return(paste(cat("F1 = ", cm$byClass[7]), cm))
return(cm)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
CM <- data.frame(cm)
return(paste(cat("F1 = ", cm$byClass[7]), cm))
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
CM <- kable(cm)
return(paste(cat("F1 = ", cm$byClass[7]), cm))
}
modstat(model1, test)
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
return(paste(cat("F1 = ", cm$byClass[7]), cm))
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
return(kable(paste(cat("F1 = ", cm$byClass[7]), cm[2], cm[3], cm[4], cm[5])))
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
return(paste(cat("F1 = ", cm$byClass[7]), cm[2], cm[3], cm[4], cm[5]))
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7]), cm[2], cm[3], cm[4], cm[5])
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7]), \n cm[2], cm[3], cm[4], cm[5])
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7]), c(cm[2], cm[3], cm[4], cm[5]))
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7]), c(kable(cm)))
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7]), c(tbl(cm)))
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7]), print(cm))
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7]), cm)
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7], " "), print(cm))
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7], " "), " ")
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7], " "), cm)
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7], " "), cm, sep = "\n")
return(results)
}
modstat(model1, test)
modstat <- function(model, test, target = "TARGET_FLAG", threshold = 0.5){
test$new <- ifelse(predict.glm(model, test, "response") >= threshold, 1, 0)
cm <- confusionMatrix(factor(test$new), factor(test[[target]]), "1")
df <- data.frame(obs = test$TARGET_FLAG, predicted = test$new, probs = predict(model, test))
Pscores <- prediction(df$probs, df$obs)
AUC <- performance(Pscores, measure = "auc")@y.values[[1]]
pscores <- performance(Pscores, "tpr", "fpr")
plot(pscores,main="ROC Curve", sub = paste0("AUC: ", round(AUC, 3)))
results <- paste(cat("F1 = ", cm$byClass[7], " "), cm)
return(results)
}
knitr::opts_chunk$set(echo = TRUE)
# Packages
library(tidyverse)
library(kableExtra)
library(ggcorrplot)
library(reshape2)
library(bestNormalize)
library(caret)
library(MASS)
library(pROC)
library(stats)
library(ROCR)
library(ROCR)
# short descriptions of variables as table from matrix
vardesc <- data.frame(matrix(c(
'INDEX',	'Identification variable',
'TARGET_FLAG',	'Was car in a crash? 1 = Yes, 0 = No',
'TARGET_AMT',	'Cost of car crash',
'AGE',	'Age of driver',
'BLUEBOOK',	'Value of vehicle',
'CAR_AGE',	'Vehicle age',
'CAR_TYPE',	'Type of car',
'CAR_USE', 'Main purpose the vehicle is used for',
'CLM_FREQ',	'Number of claims filed in past five years',
'EDUCATION',	'Maximum education level',
'HOMEKIDS',	'Number of children at home',
'HOME_VAL',	'Value of driver\'s home',
'INCOME',	'Annual income of the driver',
'JOB',	'Type of job by standard collar categories',
'KIDSDRIV',	'Number of children who drive',
'MSTATUS',	'Marital status',
'MVR_PTS',	'Motor vehicle inspection points',
'OLDCLAIM',	'Total claims payout in past five years',
'PARENT1',	'Single parent status',
'RED_CAR',	'1 if car is red, 0 if not',
'REVOKED',	'License revoked in past 7 years status',
'SEX',	'Driver gender',
'TIF',	'Time in force',
'TRAVETIME',	'Distance to work in minutes',
'URBANICITY',	'Category of how urban the area the driver lives is',
'YOJ', 'Number of years on the job'
),  byrow = TRUE, ncol = 2))
colnames(vardesc) <- c('Variable', 'Description')
kbl(vardesc, booktabs = T, caption = "Variable Descriptions") %>%
kable_styling(latex_options = c("striped", "HOLD_position"), full_width = F)
tdata <- read.csv(
"https://raw.githubusercontent.com/palmorezm/msds/main/621/HW4/insurance_training_data.csv")
edata <- read.csv(
"https://raw.githubusercontent.com/palmorezm/msds/main/621/HW4/insurance-evaluation-data.csv")
View(tdata)
initialobs <- tdata[1:4,]
kbl(t(initialobs), booktabs = T, caption = "Initial Observations") %>%
kable_styling(latex_options = c("striped", "HOLD_position"), full_width = F) %>%
add_header_above(c(" ", " ", "Row Number", " ", " ")) %>%
footnote(c("Includes the first four observations of all variables in the data"))
intialobs
